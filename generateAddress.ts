import { Address, Cell, beginCell, storeStateInit } from '@ton/core';
/**
 * Derives a contract address from the given parent address and index.
 * @param parentAddressStr - The parent contract address as string
 * @param index - The index used for derivation (e.g., studentId or similar)
 * @returns The derived contract Address
 */
function getDerivedContractAddress(parentAddressStr: string, index: number): Address {
    const code = Cell.fromHex('b5ee9c7241022a010008a7000114ff00f4a413f4bcf2c80b01020162021003f8d0eda2edfb01d072d721d200d200fa4021103450666f04f86102f862ed44d0d200019bd31ffa40d4fa0055306c148e92fa40810101d7005902d10130708307884300e205925f05e023d749c21fe30003f90182f0677e8cc293f605b4e5b43b49d699b421f79482f729bfebab40fe728d7a2d3d91bae3025f04f2c08228030e04be03d31f218210107d1186bae302218210f4765048ba8e2b313302d401318200e402f8425240c705f2f45003c87f01ca0055305034cb1f01cf16cc01fa02c9ed54db31e0218210e5443d9fbae30221821028ada01fbae302218210bbf36824ba04070a0b01fc31fa40d45932f8416f243032248200947d02c705f2f4f8276f1021a18209312d0066b608a18209312d00a0a12110561045075033db3c5235c85982106584b7565003cb1f810101cf0001cf16c9c88258c000000000000000000000000101cb67ccc970fb005502c87f01ca0055305034cb1f01cf16cc01fa02c9ed54db3105029a8200e83727c2fff2f4260410364507db3c5c705920f90022f9005ad76501d76582020134c8cb17cb0fcb0fcbffcbff71f90400c87401cb0212ca07cbffc9d0707270208b082d103504103e4ddd160600f0c8555082105fcc3d145007cb1f15cb3f5003cf1601206e95307001cb0192cf16e2216eb3957f01ca00cc947032ca00e201fa0201cf16c916105a1049103850821036453304c8cf8580ca00cf8440ce01fa028069cf40025c6e016eb0935bcf819d58cf8680cf8480f400f400cf81e2f400c901fb00a4413303ee31d4d45932f8416f24303210455e325077db3c8200f5b55312bef2f421a120c2008ebf70708810341023102a036d50536d03c8cf8580ca00cf8440ce01fa028069cf40025c6e016eb0935bcf819d58cf8680cf8480f400f400cf81e2f400c901fb00923036e25043c8598210e5443d9f5003cb1fccccc91e0809006200000000596f752068617665207375636365737366756c6c7920656e726f6c6c656420746f2074686520636f75727365210060c88258c000000000000000000000000101cb67ccc970fb0003c87f01ca0055305034cb1f01cf16cc01fa02c9ed54db310076313403fa0001318200adf8f8416f2410235f035250c705f2f48200f20a21c200f2f44330c87f01ca0055305034cb1f01cf16cc01fa02c9ed54db3101ba8e4f31d31fd45932f84212c8552082109b0285f75004cb1f12cb1fcc01cf16c9c88258c000000000000000000000000101cb67ccc970fb004003c87f01ca0055305034cb1f01cf16cc01fa02c9ed54db31e0018210946a98b6bae302030c0166d33f0131c8018210aff90f5758cb1fcb3fc9443012f84201706ddb3cc87f01ca0055305034cb1f01cf16cc01fa02c9ed54db310d00a06d6d226eb3995b206ef2d0806f22019132e21024700304804250231036552212c8cf8580ca00cf8440ce01fa028069cf40025c6e016eb0935bcf819d58cf8680cf8480f400f400cf81e2f400c901fb0001ea81289bf8416f2410235f035220c705f2f4f8276f108209312d00a120c2008ebb7070882459036d50536d03c8cf8580ca00cf8440ce01fa028069cf40025c6e016eb0935bcf819d58cf8680cf8480f400f400cf81e2f400c901fb009130e24003c87f01ca0055305034cb1f01cf16cc01fa02c9ed540f002c00000000576974686472617720636f6d706c6574656402012011240201201214025fb8b5ded44d0d200019bd31ffa40d4fa0055306c148e92fa40810101d7005902d10130708307884300e25513db3c6c4182813000231025fba7a3ed44d0d200019bd31ffa40d4fa0055306c148e92fa40810101d7005902d10130708307884300e25503db3c6c4182815015edb3c705920f90022f9005ad76501d76582020134c8cb17cb0fcb0fcbffcbff71f90400c87401cb0212ca07cbffc9d0160126f8280188c87001ca005a59cf16810101cf00c9170114ff00f4a413f4bcf2c80b18020162192202f8d001d072d721d200d200fa4021103450666f04f86102f862ed44d0d200018e27fa40810101d700d20020d70b01c30093fa40019472d7216de201d2000191d4926d01e255406c158e1bfa40810101d7005902d1016d6d8200c13df8425250c705f2f47059e206925f06e004d70d1ff2e0822182102fcb26a2bae302011a1c01d431d33f0131f8416f2410235f037080407f543467c8552082108b7717355004cb1f12cb3f810101cf0001cf16c91034413010246d50436d03c8cf8580ca00cf8440ce01fa028069cf40025c6e016eb0935bcf819d58cf8680cf8480f400f400cf81e2f400c901fb0040341b0064c87f01ca0055405054cf1612810101cf00ca0058206e95307001cb0192cf16e2216eb3957f01ca00cc947032ca00e2c9ed54011c82105fcc3d14bae3025f06f2c0821d04fcd33ffa4020d70b01c30093fa40019472d7216de201d2000191d4926d01e2fa005155151443305b34f8416f24303210581047103649aadb3c6c312281296709c70518f2f47f06206ef2d0807105c8018210d53276db58cb1fcb3fc94830155a6d6d40037fc8cf8580ca00cf8440ce01fa028069cf40025c6e016eb08a8ae21e1f2021002cf8276f1021a18209312d0066b608a18209312d00a0a100065bcf81001a58cf8680cf8480f400f400cf810078f400c901fb0050044313c87f01ca0055405054cf1612810101cf00ca0058206e95307001cb0192cf16e2216eb3957f01ca00cc947032ca00e2c9ed5401a7a11f9fda89a1a400031c4ff481020203ae01a40041ae1603860127f4800328e5ae42dbc403a4000323a924da03c4aa80d82b1c37f481020203ae00b205a202dadb0401827bf084a4a18e0be5e8e0b3c5b678d8ab23002421206ef2d08021206ef2d0802454463028590201482527025bb60b7da89a1a4000337a63ff481a9f400aa60d8291d25f481020203ae00b205a20260e1060f108601c5b678d887028260006547312025bb4b4dda89a1a4000337a63ff481a9f400aa60d8291d25f481020203ae00b205a20260e1060f108601c5b678d88302829000000022033ea2c3a'); // Truncated for readability

    const data = beginCell()
        .storeUint(0, 1)
        .storeAddress(Address.parse(parentAddressStr))
        .storeInt(BigInt(index), 257)
        .endCell();

    const init = { code, data };
    const hash = beginCell().store(storeStateInit(init)).endCell().hash();

    return new Address(0, hash);
}

// Log derived address
const ansiNitroAddress = '0QC4hAk6Xhs4UY3dPZ3o0UbR5dnV4EeO-6I0dp13fYcsjAxo';
const derived = getDerivedContractAddress(ansiNitroAddress, 15);
console.log('Derived Address:', derived.toString());
